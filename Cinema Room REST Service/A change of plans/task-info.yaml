type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", any())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", any())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket
        };
    }
  learner_created: false
- name: src/cinema/storage/TicketBadRequestException.java
  visible: true
  text: |
    package cinema.storage;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST)
    public class TicketBadRequestException extends RuntimeException {
        public TicketBadRequestException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/cinema/entities/Seat.java
  visible: true
  text: |
    package cinema.entities;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    public class Seat {

        private final int row;
        private final int column;
        private final int price;
        @JsonIgnore
        private boolean purchased;

        public Seat(int row, int column, int price) {
            this.row = row;
            this.column = column;
            this.price = price;
        }

        public int getRow() {
            return row;
        }

        public int getColumn() {
            return column;
        }

        public int getPrice() {
            return price;
        }

        public boolean isPurchased() {
            return purchased;
        }

        public void purchase() {
            this.purchased = true;
        }

        @JsonIgnore
        public String getKey() {
            return getKey(row, column);
        }

        public static String getKey(int row, int column) {
            return row + "_" + column;
        }
    }
  learner_created: true
- name: src/cinema/controller/CinemaController.java
  visible: true
  text: |
    package cinema.controller;

    import cinema.entities.AvailableSeats;
    import cinema.entities.Seat;
    import cinema.entities.request.PurchaseSeatBody;
    import cinema.storage.CinemaStorage;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    import java.util.Collections;

    @RestController
    public class CinemaController {

        private final CinemaStorage storage;

        public CinemaController(CinemaStorage storage) {
            this.storage = storage;
        }

        @GetMapping("/seats")
        public AvailableSeats getSeats() {
            return storage.getAvailableSeats();
        }

        @PostMapping("/purchase")
        public ResponseEntity<Seat> purchaseSeat(@RequestBody PurchaseSeatBody body) {
            try {
                return new ResponseEntity<>(storage.purchaseSeat(body.row, body.column), HttpStatus.OK);
            } catch (Exception e) {
                return new ResponseEntity(Collections.singletonMap("error", e.getMessage()), HttpStatus.BAD_REQUEST);
            }
        }
    }
  learner_created: true
- name: src/cinema/storage/CinemaStorageInMemory.java
  visible: true
  text: |
    package cinema.storage;

    import cinema.entities.AvailableSeats;
    import cinema.entities.Seat;
    import org.springframework.stereotype.Repository;

    import java.util.Collection;
    import java.util.LinkedHashMap;
    import java.util.Map;
    import java.util.function.Predicate;
    import java.util.stream.Collectors;

    @Repository
    public class CinemaStorageInMemory implements CinemaStorage {

        private static final int ROW_COUNT = 9;
        private static final int COL_COUNT = 9;
        private Map<String, Seat> seatMap;

        {
            seatMap = new LinkedHashMap<>();
            for (int row = 1; row <= ROW_COUNT; row++) {
                int price = getPrice(row);
                for (int col = 1; col <= COL_COUNT; col++) {
                    Seat seat = new Seat(row, col, price);
                    seatMap.put(seat.getKey(), seat);
                }
            }
        }

        private static int getPrice(int row) {
            return row <= 4 ? 10 : 8;
        }

        @Override
        public AvailableSeats getAvailableSeats() {
            return new AvailableSeats()
                    .setRows(ROW_COUNT)
                    .setColumns(COL_COUNT)
                    .setSeats(getAvailableSeatsCollection());
        }

        @Override
        public Seat purchaseSeat(int row, int column) {
            Seat seat = getSeat(row, column);
            checkSeatIsAvailable(seat);
            seat.purchase();
            return seat;
        }

        private Seat getSeat(int row, int column) {
            Seat seat = seatMap.get(Seat.getKey(row, column));
            if (seat == null) {
                throw new TicketBadRequestException("The number of a row or a column is out of bounds!");
            }
            return seat;
        }

        private void checkSeatIsAvailable(Seat seat) {
            if (seat.isPurchased()) {
                throw new TicketBadRequestException("The ticket has been already purchased!");
            }
        }

        private Collection<Seat> getAvailableSeatsCollection() {
            return seatMap.values()
                    .stream()
                    .filter(Predicate.not(Seat::isPurchased))
                    .collect(Collectors.toList());
        }
    }
  learner_created: true
- name: src/cinema/storage/CinemaStorage.java
  visible: true
  text: |
    package cinema.storage;

    import cinema.entities.AvailableSeats;
    import cinema.entities.Seat;

    public interface CinemaStorage {

        AvailableSeats getAvailableSeats();

        Seat purchaseSeat(int row, int column);
    }
  learner_created: true
- name: src/cinema/entities/response/PurchasedTicketResponse.java
  visible: true
  learner_created: true
- name: src/cinema/entities/response/AvailableSeatsResponse.java
  visible: true
  text: |
    package cinema.entities;

    import com.fasterxml.jackson.annotation.JsonProperty;

    import java.util.*;

    public class AvailableSeats {
        @JsonProperty("total_rows")
        private int rows;
        @JsonProperty("total_columns")
        private int columns;
        @JsonProperty("available_seats")
        private Collection<Seat> seats = Collections.emptyList();

        public int getRows() {
            return rows;
        }

        public AvailableSeats setRows(int rows) {
            this.rows = rows;
            return this;
        }

        public int getColumns() {
            return columns;
        }

        public AvailableSeats setColumns(int columns) {
            this.columns = columns;
            return this;
        }

        public Collection<Seat> getSeats() {
            return new ArrayList<>(seats);
        }

        public AvailableSeats setSeats(Collection<Seat> seats) {
            this.seats = seats == null ? Collections.emptyList() : new ArrayList<>(seats);
            return this;
        }

    }
  learner_created: true
- name: src/cinema/entities/request/PurchaseSeatRequest.java
  visible: true
  text: |
    package cinema.entities.request;

    public class PurchaseSeatBody {
        public int row;
        public int column;
    }
  learner_created: true
- name: src/cinema/entities/request/ReturnTicketRequest.java
  visible: true
  learner_created: true
- name: src/cinema/entities/response/ReturnTickedResponse.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/189/stages/947/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 30 Jul 2021 22:09:36 UTC
record: -1
